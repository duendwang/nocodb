networks:
  default:
  traefik-proxy:
    name: traefik-proxy
    external: true
services:
  nocodb:
#    container_name: nocodb
    depends_on:
      - nocodb-db
      - redis
#      - minio
    user: ${PUID:-1000}:${PGID:-1000}
    security_opt:
      - "no-new-privileges:true"
    cap-drop:
      - SETUID
      - SETGID
    environment:
      - "NC_DB=pg://nocodb-db:5432?u=${DATABASE_USER}&p=${DATABASE_PW}&d=${DATABASE_NAME}"
      - "NC_PUBLIC_URL=https://${DOMAIN}"
      - NC_DISABLE_TELE=true
    image: "nocodb/nocodb:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.nocodb.loadbalancer.server.port=8080"
      - "traefik.http.routers.nocodb.rule=Host(`$DOMAIN`)"
      - "traefik.http.routers.nocodb.entrypoints=websecure"
      - "traefik.http.routers.nocodb.tls.certresolver=http-challenge"
      #- com.centurylinklabs.watchtower.enable=true
    networks:
      - default
      - traefik-proxy
    restart: always
    volumes:
      - "nocodb-data:/usr/app/data"
  nocodb-db:
#    container_name: nocodb-db
    user: ${PUID:-1000}:${PGID:-1000}
    security_opt:
      - "no-new-privileges:true"
    cap-drop:
      - SETUID
      - SETGID
    environment:
      POSTGRES_DB: "${DATABASE_NAME}"
      POSTGRES_PASSWORD: "${DATABASE_PW}"
      POSTGRES_USER: "${DATABASE_USER}"
    expose:
      - 5432
    healthcheck:
      interval: 10s
      retries: 10
      test: "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"
      timeout: 2s
    image: "postgres:12.17-alpine"
#    networks:
#      - traefik_proxy
    restart: always
    volumes:
      - "nocodb-db:/var/lib/postgresql/data"
  redis:
    image: redis:latest
    restart: unless-stopped
    user: ${PUID:-1000}:${PGID:-1000}
    security_opt:
      - "no-new-privileges:true"
    cap-drop:
      - SETUID
      - SETGID
    command:
      - /bin/sh
      - -c
#      - redis-server --requirepass "\$\${REDIS_PASSWORD}"
      - redis-server
    healthcheck:
#      test: [ "CMD", "redis-cli", "-a", "\$\${REDIS_PASSWORD}", "--raw", "incr", "ping" ]
      test: [ "CMD", "redis-cli", "-a", "--raw", "incr", "ping" ]
    volumes:
      - "nocodb-redis:/data"
#  minio:
#    image: minio/minio:latest
#    restart: unless-stopped
#    entrypoint: /bin/sh
#    volumes:
#      - "nocodb-minio:/export"
#    command: -c 'mkdir -p /export/nocodb && /usr/bin/minio server /export'
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.services.minio.loadbalancer.server.port=9000"
#      - "traefik.http.routers.minio.rule=Host(`$MINIO_DOMAIN`)"
#      - "traefik.http.routers.minio.entrypoints=websecure"
#  traefik:
#    command:
#      - "--providers.docker=true"
#      - "--ping=true"
#      - "--ping.entryPoint=ping"
#      - "--providers.docker.exposedbydefault=false"
#      - "--providers.docker.network=traefik_proxy"
#      - "--entryPoints.ping.address=:8081"
#      - "--entrypoints.http.address=:80"
#      - "--entrypoints.https.address=:443"
#      - "--entrypoints.https.http.tls.certresolver=letsencrypt"
#      - "--entrypoints.https.http.tls.domains[0].main=${DOMAINNAME}"
#      - "--entrypoints.https.http.tls.domains[0].sans=*.${DOMAINNAME}"
#      - "--entrypoints.http.http.redirections.entryPoint.to=https"
#      - "--entrypoints.http.http.redirections.entryPoint.scheme=https"
#      - "--certificatesresolvers.letsencrypt.acme.dnsChallenge.delayBeforeCheck=15"
#      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
#      - "--certificatesresolvers.letsencrypt.acme.email=info@${DOMAINNAME}"
#      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
#      - "--certificatesResolvers.letsencrypt.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53"
#    container_name: traefik
#    environment:
#      - "CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}"
#    healthcheck:
#      retries: 3
#      test:
#        - CMD
#        - wget
#        - "-c"
#        - "http://localhost:8081/ping"
#      timeout: 3s
#    image: "traefik:v2.11"
#    networks:
#      - default
#      - traefik_proxy
#    ports:
#      - "80:80"
#      - "443:443"
#    restart: always
#    volumes:
#      - "letsencrypt:/letsencrypt"
#      - "/var/run/docker.sock:/var/run/docker.sock:ro"
#  watchtower:
#    command: "--schedule \"0 5 * * *\" --cleanup --label-enable"
#    container_name: watchtower
#    image: containrrr/watchtower
#    labels:
#      - com.centurylinklabs.watchtower.enable=true
#    networks:
#      - traefik_proxy
#    restart: always
#    volumes:
#      - "/var/run/docker.sock:/var/run/docker.sock:ro"
volumes:
  nocodb-data:
    name: nocodb-data
  nocodb-db:
    name: nocodb-db
  nocodb-redis:
    name: nocodb-redis
#  nocodb-minio:
#    name: nocodb-minio
